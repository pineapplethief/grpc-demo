#!/usr/bin/env ruby

# frozen_string_literal: true

this_dir = File.expand_path(File.dirname(__FILE__))
lib_dir = File.join(this_dir, 'lib')
$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)

protobuf_dir = File.join(this_dir, '../server/lib/protobuf-autogenerated')
$LOAD_PATH.unshift(protobuf_dir) unless $LOAD_PATH.include?(protobuf_dir)

require 'dry/cli'

require 'client'
require 'awesome_print'
require_relative './../server/lib/protobuf-autogenerated/tasks_services_pb'

module Helpers
  module_function

  def separator
    puts "=" * 20
    puts ""
  end

  def print_task(task)
    puts "title       = #{task.title}"
    puts "description = #{task.description}"
    puts "done?       = #{!task.done_at.nil?}"
  end
end

module TasksClient
  module CLI
    module Commands
      extend Dry::CLI::Registry

      class Version < Dry::CLI::Command
        desc 'Print version'

        def call(*)
          puts '0.6.7'
        end
      end

      class GetTasks < Dry::CLI::Command
        desc 'Gets list of tasks'

        def call(*)
          responses = Client.instance.get_tasks
          responses.each do |response|
            puts "Got a Task:"
            puts "-" * 10
            Helpers.print_task(response)
            Helpers.separator
          end
        end
      end

      class AddTask < Dry::CLI::Command
        desc 'adds task'

        option :title, required: true, desc: 'Title of the task'
        option :description, default: nil, desc: 'Description of the task'

        def call(title:, description:, **)
          puts "Adding Task with title='#{title}', description='#{description}'"

          response = Client.instance.add_task(title: title, description: description)

          puts "Task added successfully?: #{response.success}"
          Helpers.separator
        end
      end

      class FinishTask < Dry::CLI::Command
        desc 'finishes the task'

        option :title, required: true, desc: 'Title of the task'

        def call(title:, **)
          puts "Finishes Task with title='#{title}'"
          Helpers.separator

          response = Client.instance.finish_task(title: title)

          puts "Updated Task:"
          Helpers.print_task(response.task)
          Helpers.separator
        end
      end

      class DeleteTask < Dry::CLI::Command
        desc 'deletes task'

        option :title, required: true, desc: 'Title of the task'

        def call(title:, **)
          puts "Deleting Task with title='#{title}'"

          response = Client.instance.delete_task(title: title)

          puts "Task deleted successfully?: #{response.success}"
          Helpers.separator
        end
      end

      register 'version', Version, aliases: ['v', '-v', '--version']
      register 'list', GetTasks
      register 'add', AddTask
      register 'finish', FinishTask
      register 'delete', DeleteTask
    end
  end
end

Dry::CLI.new(TasksClient::CLI::Commands).call
